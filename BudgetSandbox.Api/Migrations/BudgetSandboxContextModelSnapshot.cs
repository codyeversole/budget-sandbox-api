// <auto-generated />
using System;
using BudgetSandbox.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BudgetSandbox.Api.Migrations
{
    [DbContext(typeof(BudgetSandboxContext))]
    partial class BudgetSandboxContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Positive")
                        .HasColumnType("boolean")
                        .HasColumnName("positive");

                    b.Property<int>("SandboxId")
                        .HasColumnType("integer")
                        .HasColumnName("sandbox_id");

                    b.HasKey("AccountId")
                        .HasName("pk_accounts");

                    b.HasIndex("SandboxId")
                        .HasDatabaseName("ix_accounts_sandbox_id");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.AccountBucket", b =>
                {
                    b.Property<int>("AccountBucketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("account_bucket_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountBucketId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<int>("BucketId")
                        .HasColumnType("integer")
                        .HasColumnName("bucket_id");

                    b.Property<decimal?>("Percent")
                        .HasColumnType("numeric")
                        .HasColumnName("percent");

                    b.HasKey("AccountBucketId")
                        .HasName("pk_account_buckets");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_account_buckets_account_id");

                    b.HasIndex("BucketId")
                        .HasDatabaseName("ix_account_buckets_bucket_id");

                    b.ToTable("account_buckets", (string)null);
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("asset_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssetId"));

                    b.Property<decimal>("AmountValue")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_value");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("SandboxId")
                        .HasColumnType("integer")
                        .HasColumnName("sandbox_id");

                    b.HasKey("AssetId")
                        .HasName("pk_assets");

                    b.HasIndex("SandboxId")
                        .HasDatabaseName("ix_assets_sandbox_id");

                    b.ToTable("assets", (string)null);
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.Bucket", b =>
                {
                    b.Property<int>("BucketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bucket_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BucketId"));

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean")
                        .HasColumnName("archived");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("GoalAchieved")
                        .HasColumnType("boolean")
                        .HasColumnName("goal_achieved");

                    b.Property<decimal?>("GoalBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("goal_balance");

                    b.Property<bool>("Positive")
                        .HasColumnType("boolean")
                        .HasColumnName("positive");

                    b.Property<int>("SandboxId")
                        .HasColumnType("integer")
                        .HasColumnName("sandbox_id");

                    b.HasKey("BucketId")
                        .HasName("pk_buckets");

                    b.HasIndex("SandboxId")
                        .HasDatabaseName("ix_buckets_sandbox_id");

                    b.ToTable("buckets", (string)null);
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.CashFlowItem", b =>
                {
                    b.Property<int>("CashFlowItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cash_flow_item_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CashFlowItemId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<int?>("AssetId")
                        .HasColumnType("integer")
                        .HasColumnName("asset_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("frequency");

                    b.Property<bool>("Positive")
                        .HasColumnType("boolean")
                        .HasColumnName("positive");

                    b.Property<int>("SandboxId")
                        .HasColumnType("integer")
                        .HasColumnName("sandbox_id");

                    b.HasKey("CashFlowItemId")
                        .HasName("pk_cash_flow_items");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_cash_flow_items_account_id");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_cash_flow_items_asset_id");

                    b.HasIndex("SandboxId")
                        .HasDatabaseName("ix_cash_flow_items_sandbox_id");

                    b.ToTable("cash_flow_items", (string)null);
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.CashFlowItemAccount", b =>
                {
                    b.Property<int>("CashFlowItemAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cash_flow_item_account_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CashFlowItemAccountId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<int>("CashFlowItemId")
                        .HasColumnType("integer")
                        .HasColumnName("cash_flow_item_id");

                    b.Property<decimal?>("Percent")
                        .HasColumnType("numeric")
                        .HasColumnName("percent");

                    b.HasKey("CashFlowItemAccountId")
                        .HasName("pk_cash_flow_item_accounts");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_cash_flow_item_accounts_account_id");

                    b.HasIndex("CashFlowItemId")
                        .HasDatabaseName("ix_cash_flow_item_accounts_cash_flow_item_id");

                    b.ToTable("cash_flow_item_accounts", (string)null);
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.CashFlowItemBucket", b =>
                {
                    b.Property<int>("CashFlowItemBucketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cash_flow_item_bucket_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CashFlowItemBucketId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<int>("BucketId")
                        .HasColumnType("integer")
                        .HasColumnName("bucket_id");

                    b.Property<int>("CashFlowItemId")
                        .HasColumnType("integer")
                        .HasColumnName("cash_flow_item_id");

                    b.Property<decimal?>("Percent")
                        .HasColumnType("numeric")
                        .HasColumnName("percent");

                    b.HasKey("CashFlowItemBucketId")
                        .HasName("pk_cash_flow_item_buckets");

                    b.HasIndex("BucketId")
                        .HasDatabaseName("ix_cash_flow_item_buckets_bucket_id");

                    b.HasIndex("CashFlowItemId")
                        .HasDatabaseName("ix_cash_flow_item_buckets_cash_flow_item_id");

                    b.ToTable("cash_flow_item_buckets", (string)null);
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.Sandbox", b =>
                {
                    b.Property<int>("SandboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sandbox_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SandboxId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("SandboxId")
                        .HasName("pk_sandboxs");

                    b.ToTable("sandboxs", (string)null);
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.UserSandbox", b =>
                {
                    b.Property<int>("UserSandboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_sandbox_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserSandboxId"));

                    b.Property<int>("SandboxId")
                        .HasColumnType("integer")
                        .HasColumnName("sandbox_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("UserSandboxId")
                        .HasName("pk_user_sandboxs");

                    b.HasIndex("SandboxId")
                        .HasDatabaseName("ix_user_sandboxs_sandbox_id");

                    b.ToTable("user_sandboxs", (string)null);
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.Account", b =>
                {
                    b.HasOne("BudgetSandbox.Api.Models.Domain.Sandbox", "Sandbox")
                        .WithMany("Accounts")
                        .HasForeignKey("SandboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accounts_sandboxs_sandbox_id");

                    b.Navigation("Sandbox");
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.AccountBucket", b =>
                {
                    b.HasOne("BudgetSandbox.Api.Models.Domain.Account", "Account")
                        .WithMany("AccountBuckets")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_account_buckets_accounts_account_id");

                    b.HasOne("BudgetSandbox.Api.Models.Domain.Bucket", "Bucket")
                        .WithMany("AccountBuckets")
                        .HasForeignKey("BucketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_account_buckets_buckets_bucket_id");

                    b.Navigation("Account");

                    b.Navigation("Bucket");
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.Asset", b =>
                {
                    b.HasOne("BudgetSandbox.Api.Models.Domain.Sandbox", "Sandbox")
                        .WithMany("Assets")
                        .HasForeignKey("SandboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assets_sandboxs_sandbox_id");

                    b.Navigation("Sandbox");
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.Bucket", b =>
                {
                    b.HasOne("BudgetSandbox.Api.Models.Domain.Sandbox", "Sandbox")
                        .WithMany("Buckets")
                        .HasForeignKey("SandboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_buckets_sandboxs_sandbox_id");

                    b.Navigation("Sandbox");
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.CashFlowItem", b =>
                {
                    b.HasOne("BudgetSandbox.Api.Models.Domain.Account", null)
                        .WithMany("CashFlowItems")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_cash_flow_items_accounts_account_id");

                    b.HasOne("BudgetSandbox.Api.Models.Domain.Asset", "Asset")
                        .WithMany("CashFlowItems")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("fk_cash_flow_items_assets_asset_id");

                    b.HasOne("BudgetSandbox.Api.Models.Domain.Sandbox", "Sandbox")
                        .WithMany("CashFlowItems")
                        .HasForeignKey("SandboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cash_flow_items_sandboxs_sandbox_id");

                    b.Navigation("Asset");

                    b.Navigation("Sandbox");
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.CashFlowItemAccount", b =>
                {
                    b.HasOne("BudgetSandbox.Api.Models.Domain.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cash_flow_item_accounts_accounts_account_id");

                    b.HasOne("BudgetSandbox.Api.Models.Domain.CashFlowItem", "CashFlowItem")
                        .WithMany("CashFlowItemAccounts")
                        .HasForeignKey("CashFlowItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cash_flow_item_accounts_cash_flow_items_cash_flow_item_id");

                    b.Navigation("Account");

                    b.Navigation("CashFlowItem");
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.CashFlowItemBucket", b =>
                {
                    b.HasOne("BudgetSandbox.Api.Models.Domain.Bucket", "Bucket")
                        .WithMany()
                        .HasForeignKey("BucketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cash_flow_item_buckets_buckets_bucket_id");

                    b.HasOne("BudgetSandbox.Api.Models.Domain.CashFlowItem", "CashFlowItem")
                        .WithMany("CashFlowItemBuckets")
                        .HasForeignKey("CashFlowItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cash_flow_item_buckets_cash_flow_items_cash_flow_item_id");

                    b.Navigation("Bucket");

                    b.Navigation("CashFlowItem");
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.UserSandbox", b =>
                {
                    b.HasOne("BudgetSandbox.Api.Models.Domain.Sandbox", "Sandbox")
                        .WithMany()
                        .HasForeignKey("SandboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_sandboxs_sandboxs_sandbox_id");

                    b.Navigation("Sandbox");
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.Account", b =>
                {
                    b.Navigation("AccountBuckets");

                    b.Navigation("CashFlowItems");
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.Asset", b =>
                {
                    b.Navigation("CashFlowItems");
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.Bucket", b =>
                {
                    b.Navigation("AccountBuckets");
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.CashFlowItem", b =>
                {
                    b.Navigation("CashFlowItemAccounts");

                    b.Navigation("CashFlowItemBuckets");
                });

            modelBuilder.Entity("BudgetSandbox.Api.Models.Domain.Sandbox", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Assets");

                    b.Navigation("Buckets");

                    b.Navigation("CashFlowItems");
                });
#pragma warning restore 612, 618
        }
    }
}
